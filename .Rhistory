knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())       # clear objects in memory
start_time <- Sys.time()
set.seed(1234567)   # random number seed, so that results are reproducible
library(randomizr)  # for complete random assignment
library(ri2)
setwd("/Users/yinghuizhou/Library/CloudStorage/Dropbox/Lingyun & Yinghui/Columbia/Political Science Courses/Experiment/Midterm")
dataset <- read.csv("TZ GBV test example-1.csv")
View(dataset)
lm_robust(comply ~ treat_gbv + as.factor(block), data = dataset, clusters = cluster)
iv_model <- iv_robust(priority_vote_gbv ~ comply + as.factor(block) | treat_gbv + as.factor(block), data = dataset, clusters = cluster)
summary(iv_model)
install.packages("grf")
setwd("/Users/yinghuizhou/Library/CloudStorage/Dropbox/Work/adaptive_experiment")
library(reticulate)
use_python('/usr/bin/python')
probs_array <- np$load("../experiments/results/probs.npy")
np <- import("numpy")
library(reticulate)
use_condaenv("/Users/yinghuizhou/opt/anaconda3/envs/aw_contextual")
use_condaenv("/Users/yinghuizhou/aw_contextual")
use_condaenv("/Users/yinghuizhou/opt/aw_contextual")
use_condaenv("/Users/yinghuizhou/opt/adaptive-confidence-intervals")
use_condaenv("/Users/yinghuizhou/adaptive-confidence-intervals")
library(reticulate)
use_condaenv("/Users/yinghuizhou/adaptive-confidence-intervals")
use_condaenv("aw_contextual", required = TRUE)
gammahat <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/gammahat.csv', header = FALSE)
muhat <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/muhat.csv', header = FALSE)
ys <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/ys.csv', header = FALSE)
ws <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/ws.csv', header = FALSE)
yobs <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/yobs.csv', header = FALSE)
xs <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/xs.csv', header = FALSE)
muxs <- read.csv('/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/muxs.csv', header = FALSE)
A <- dim(gammahat)[1]
K <- dim(gammahat)[2]
# probabilities
np <- import("numpy")
# 3 dimensions: time, contexts, treatment arms
probs_array <- np$load("/Users/yinghuizhou/Library/CloudStorage/OneDrive-TheUniversityofChicago/UCHI_3/work/Adaptive_experiment/main/aa/results/probs.npy")
library(ggplot2)
# color blind friendly palette
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
"#D55E00", "#CC79A7")
## Functions
source('adaptive_utils.R')
install.packages("policytree")
library(policytree)
library("policytree")
library(Matrix)
knitr::opts_chunk$set(echo = TRUE)
# Simplified coding based on the original table
arrest_assigned_arrest <- 400 + 13 + 1 + 384
not_arrest_assigned_arrest <- 1 + 3
arrest_assigned_not_arrest <- 1 + 1
not_arrest_assigned_not_arrest <- 396
# Total numbers assigned to each treatment
total_assigned_arrest <- 800  # From "Full arrest" and "Brief arrest" assigned
total_assigned_not_arrest <- 400  # From "Warning" assigned
# Outcomes for the assigned arrest group
perpetrators_later_arrested_arrest_assigned <- 146 + 157
# Outcomes for the assigned not arrest group
perpetrators_later_arrested_not_arrest_assigned <- 151
# ITTD_hat calculation
prop_arrest_if_assigned_arrest <- arrest_assigned_arrest / total_assigned_arrest
prop_arrest_if_assigned_not_arrest <- arrest_assigned_not_arrest / total_assigned_not_arrest
ITTD_hat <- prop_arrest_if_assigned_arrest - prop_arrest_if_assigned_not_arrest
# ITT_hat calculation
rate_later_arrest_assigned_arrest <- perpetrators_later_arrested_arrest_assigned / total_assigned_arrest
rate_later_arrest_assigned_not_arrest <- perpetrators_later_arrested_not_arrest_assigned / total_assigned_not_arrest
ITT_hat <- rate_later_arrest_assigned_arrest - rate_later_arrest_assigned_not_arrest
# CACE_hat calculation
CACE_hat <- ITT_hat / ITTD_hat
# Print the results
cat("ITT_D_hat:", ITTD_hat, "\n")
cat("ITT_hat:", ITT_hat, "\n")
cat("CACE_hat:", CACE_hat, "\n")
# Exercise 6.10 (Election monitoring experiment)
rm(list=ls())       # clear objects in memory
library(ri2)
library(foreign)    # package allows R to read Stata datasets
set.seed(1234567)   # random number seed, so that results are reproducible
# Data are from Hyde, Susan. 2010. Experimenting in Democracy Promotion: International Observers and the 2004 Presidential Elections in Indonesia.Perspectives on Politics. 8:511-27.
setwd("/Users/yinghuizhou/Library/CloudStorage/Dropbox/Lingyun & Yinghui/Columbia/Political Science Courses/Experiment/Data and R Programs/Chapter 6/Homework") #sets WD to the location of this code file
hyde <- read.dta("Chapter 6_Hyde (2010) Dataset.dta")
# Exercise 6.10 (Election monitoring experiment)
rm(list=ls())       # clear objects in memory
library(ri2)
library(foreign)    # package allows R to read Stata datasets
set.seed(1234567)   # random number seed, so that results are reproducible
# Data are from Hyde, Susan. 2010. Experimenting in Democracy Promotion: International Observers and the 2004 Presidential Elections in Indonesia.Perspectives on Politics. 8:511-27.
hyde <- read.dta("/Users/yinghuizhou/Library/CloudStorage/Dropbox/Lingyun & Yinghui/Columbia/Political Science Courses/Experiment/Data and R Programs/Chapter 6/Homework/Problem 6.10 Hyde.dta")
#Convert data into numeric format
hyde$Sample <- as.integer(hyde$Sample) -1
# monitoring treatment
hyde$observed <- as.numeric(hyde$observed=="yes")
#Find probability of treatment assignment
table(hyde$Sample)
prob <- 409/(409 + 1562)
View(hyde)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed=="yes")
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# estimate the ITT (ATE of assignment on outcome)
ITT <- estate(Y,Z,prob=probs)
library(foreign)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed=="yes")
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# estimate the ITT (ATE of assignment on outcome)
ITT <- estate(Y,Z,prob=probs)
library(foreign)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed=="yes")
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# ITT: Difference in outcomes between treatment and control groups
ITT <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# Estimating the proportion of Compliers (D1 - D0)
D1 <- mean(D[Z == 1])
D0 <- mean(D[Z == 0])
ITTd <- D1 - D0
# Estimate the CACE
CACE <- ITT/ITTd
ITT
CACE
# Check for NA values in the data
sum(is.na(Z))
sum(is.na(D))
sum(is.na(Y))
print(paste("D1:", D1))
print(paste("D0:", D0))
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE, tidy.opts=list(width.cutoff=80))
# echo means code chunks will be included by default
# tidy cleans up code for you, e.g. long lines
# eval decides whether or not to actually run the chunk
# message and warning display messages and warnings
# cache lets you store your results if something is computationally expensive
# packages you will need for RMarkdown
library(rmarkdown)
library(formatR)
library(foreign)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed==1)
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# ITT: Difference in outcomes between treatment and control groups
ITT <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# Estimating the proportion of Compliers (D1 - D0)
D1 <- mean(D[Z == 1])
D0 <- mean(D[Z == 0])
ITTd <- D1 - D0
# Estimate the CACE
CACE <- ITT/ITTd
ITT
CACE
library(foreign)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed== "1")
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# ITT: Difference in outcomes between treatment and control groups
ITT <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# Estimating the proportion of Compliers (D1 - D0)
D1 <- mean(D[Z == 1])
D0 <- mean(D[Z == 0])
ITTd <- D1 - D0
# Estimate the CACE
CACE <- ITT/ITTd
ITT
CACE
# ITT: Difference in outcomes between treatment and control groups
ITT <- mean(invalidballots[Sample == 1]) - mean(invalidballots[Sample == 0])
ITT <- mean(hyde$invalidballots[hyde$Sample == 1]) - mean(hyde$invalidballots[hyde$Sample == 0])
ITT <- estate(hyde$invalidballots,hyde$Sample,prob=probs)
?estate
library(foreign)
library(ri2)
Z <- as.integer(hyde$Sample) -1
D <- as.numeric(hyde$observed== "yes")
Y <- hyde$invalidballots
prob <- 409/(409 + 1562)
# ITT: Difference in outcomes between treatment and control groups
ITT <- mean(hyde$invalidballots[hyde$Sample == 1]) - mean(hyde$invalidballots[hyde$Sample == 0])
# Estimating the proportion of Compliers (D1 - D0)
D1 <- mean(hyde$observed[hyde$Sample == 1])
D0 <- mean(hyde$observed[hyde$Sample == 0])
ITTd <- D1 - D0
# Estimate the CACE
CACE <- ITT/ITTd
ITT
CACE
install.packages("https://cran.r-project.org/src/contrib/Archive/ri/ri_0.9.tar.gz", repos = NULL, type = "source")
library(ri)
declaration <- declare_ra(N = 1971, prob = prob)
#Conduct randomization inference with the sharp null of the ITT = 0
ri2_out <-
conduct_ri(
formula = invalidballots ~ Sample,
declaration = declaration,
assignment = "Sample",
sharp_hypothesis = 0,
data = hyde,
sims = 10000
)
plot(ri2_out)
summary(ri2_out)
ri2_d <-
conduct_ri(
formula = observed ~ Sample,
declaration = declaration,
assignment = "Sample",
sharp_hypothesis = 0,
data = hyde,
sims = 10000
)
plot(ri2_d)
summary(ri2_d)
